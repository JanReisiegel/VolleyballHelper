@startuml
class Tournament{
    + name: String
    + matches: ArrayList<Match>
    + players: HashMap<Int, String>
    + {static} createTournament(String, ArrayList<Match>,
    HashMap<Int, String>): Tournament
    + {static} createTournament(): Tournament
    + {static} loadFromJson(File): Tournament
    + addPlayer(String, Int): void
    + getPlayers(): HashMap<Int, String>
    + updatePlayer(Int, Int, String): void
    + getNumberOfPlayers(): Int
    + addMatch(String): void
    + getMatch(Int): Match
    + getMatchesArrayList(): ArrayList<Match>
    + getSummaryTable(): List<List<String>>
    + saveJson(File): void
}

class Match{
    + startTime: DateTime
    + opponentName: String
    + players: ArrayList<Player>
    + lastState: SetState
    + haveService: Boolean
    + serveStart: Boolean
    - substitutions: ArrayList<Substitution>
    - startSquads: ArrayList<ArrayList<Int>>
    - rotations: Int
    - score: MatchScore
    - opponentError: Int
    - isFinished: Boolean
    + addPlayer(): void
    + opponentError(): void
    + playerAttack(Int, AttackEnum): void
    + playerServe(Int, ServeEnum): void
    + playerBlock(Int, BlockEnum): void
    + playerReceivedServe(Int,
        ReceiveServeEnum): void
    + rotate(): void
}

class MatchScore{
    - teamSets: Int
    - opponentSets: Int
    - teamPoints: ArrayList<Int>
    - opponentPoints: ArrayList<Int>
    - setControl(): void
    + opponentPoint(): void
    + teamPoint(): void
    + getNumberOfSet(): void
    + getSetsScore(): String
    + getFinalScore(): String
    + getTeamSetScore(Int): Int
    + getTeamSetScore(): Int
    + getOpponentSetScore(Int): Int
    + getOpponentSetScore(): Int
}

class Player{
    + name: String
    + jerseyNumber: Int
    - serveStats: ServiceStats
    - blockStats: BlockStats
    - attackStats: AttackStats
    - receiveStats: ReceiveServeStats
    + addServeStat(ServeEnum): void
    + addBlockStat(BlockEnum): void
    + addReceiveStat(ReceiveServeEnum): void
    + addAttackStat(AttackEnum): void
    + getPlayerData(): List<String>
    + updateSummary(MutableList<Double>):  MutableList<Double>
}

class ReceiveServeStats{
    - ideal: Int
    - goods: Int
    - bads: Int
    - errors: Int
    + receiveServe(ReceiveServeEnum): void
    + getAttempts(): Int
    + getStatistics(ReceiveServeEnum): Int
}
class ServiceStats{
    - receive: Int
    - aces: Int
    - errors: Int
    + serve(ServeEnum): void
    + getAttempts(): Int
    + getStatistics(ServeEnum): Int
}
class AttackStats{
    - received: Int
    - errors: Int
    - hits: Int
    - blocks: Int
    + attack(AttackEnum): void
    + getAttempts(): Int
    + getStatistics(AttackEnum): Int
}
class BlockStats{
    - noPoint: Int
    - points: Int
    - errors: Int
    + block(ReceiveServeEnum): void
    + getAttempts(): Int
    + getStatistics(BlockEnum): Int
}

class Substitution{
    + playerOut: Player
    + playerIn: Player
    + set: Int
    + teamScore: Int
    + opponentScore: Int
}

Player -- ReceiveServeStats
Player -- AttackStats
Player -- BlockStats
Player -right- ServiceStats

Tournament o-right- Match
Match o-right- Player

Match -- MatchScore
Match o-- Substitution

enum ReceiveServeEnum{
    IDEAL
    CAN_CONTINUE
    CANT_CONTINUE
    ERROR
}

enum ServeEnum{
    ACE
    RECEIVED
    ERROR
}

enum AttackEnum{
    HIT
    RECEIVED
    BLOCK
    ERROR
}

enum BlockEnum{
    ERROR
    POINT
    NO_POINT
}

enum SetState{
    SERVE
    RECEIVE
    ATTACK_BLOCK
    END_SET
    NONE
}


@enduml